//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 16/03/2023 22:04:59
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using MySql.EntityFrameworkCore.Extensions;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace appglobal.models
{

    public partial class data_model : DbContext
    {

        public data_model() :
            base()
        {
            OnCreated();
        }

        public data_model(DbContextOptions<data_model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(@"persistsecurityinfo=True;server=localhost;user id=root;database=multithread");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<DataUser> DataUsers
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.DataUserMapping(modelBuilder);
            this.CustomizeDataUserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region DataUser Mapping

        private void DataUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DataUser>().ToTable(@"DataUsers");
            modelBuilder.Entity<DataUser>().Property(x => x.nik).HasColumnName(@"nik").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<DataUser>().Property(x => x.nama).HasColumnName(@"nama").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<DataUser>().Property(x => x.alamat).HasColumnName(@"alamat").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<DataUser>().HasKey(@"nik");
        }

        partial void CustomizeDataUserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}

namespace appglobal.models
{
    public partial class DataUser {

        public DataUser()
        {
            OnCreated();
        }

        public string nik { get; set; }

        public string nama { get; set; }

        public string alamat { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}
